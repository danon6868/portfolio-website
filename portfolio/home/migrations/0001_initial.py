# Generated by Django 4.1.2 on 2022-10-06 20:22

import colorfield.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.fields
import wagtail.contrib.forms.models
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0077_alter_revision_user"),
        ("wagtailimages", "0024_index_image_file_hash"),
    ]

    operations = [
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "to_address",
                    models.CharField(
                        blank=True,
                        help_text="Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.",
                        max_length=255,
                        validators=[wagtail.contrib.forms.models.validate_to_address],
                        verbose_name="to address",
                    ),
                ),
                (
                    "from_address",
                    models.EmailField(
                        blank=True, max_length=255, verbose_name="from address"
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="subject"
                    ),
                ),
                ("first_name", models.CharField(max_length=64, null=True)),
                ("second_name", models.CharField(max_length=64, null=True)),
                (
                    "professional_title",
                    models.CharField(blank=True, max_length=140, null=True),
                ),
                ("about", wagtail.fields.RichTextField(null=True)),
                ("thank_you_text", wagtail.fields.RichTextField(null=True)),
                (
                    "personal_photo",
                    models.ForeignKey(
                        help_text="Please, upload a square photo (for example 256px x 256px).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Home Page",
                "verbose_name_plural": "Home Pages",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("title", models.CharField(max_length=64)),
                ("description", wagtail.fields.RichTextField(blank=True, null=True)),
                ("demo_url", models.URLField(blank=True, null=True)),
                ("source_url", models.URLField()),
                (
                    "finished_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Finished date"
                    ),
                ),
                (
                    "logo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to="home.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UsedTechnology",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=256)),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#FFFFFF", image_field=None, max_length=18, samples=None
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SkillType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("name", models.CharField(blank=True, max_length=512, null=True)),
                ("example_1", wagtail.fields.RichTextField(blank=True, default=None)),
                ("example_2", wagtail.fields.RichTextField(blank=True, default=None)),
                ("example_3", wagtail.fields.RichTextField(blank=True, default=None)),
                ("example_4", wagtail.fields.RichTextField(blank=True, default=None)),
                ("example_5", wagtail.fields.RichTextField(blank=True, default=None)),
                ("example_6", wagtail.fields.RichTextField(blank=True, default=None)),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="skilltype",
                        to="home.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FormField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "clean_name",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Safe name of the form field, the label converted to ascii_snake_case",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the form field",
                        max_length=255,
                        verbose_name="label",
                    ),
                ),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("singleline", "Single line text"),
                            ("multiline", "Multi-line text"),
                            ("email", "Email"),
                            ("number", "Number"),
                            ("url", "URL"),
                            ("checkbox", "Checkbox"),
                            ("checkboxes", "Checkboxes"),
                            ("dropdown", "Drop down"),
                            ("multiselect", "Multiple select"),
                            ("radio", "Radio buttons"),
                            ("date", "Date"),
                            ("datetime", "Date/time"),
                            ("hidden", "Hidden field"),
                        ],
                        max_length=16,
                        verbose_name="field type",
                    ),
                ),
                (
                    "required",
                    models.BooleanField(default=True, verbose_name="required"),
                ),
                (
                    "choices",
                    models.TextField(
                        blank=True,
                        help_text="Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.",
                        verbose_name="choices",
                    ),
                ),
                (
                    "default_value",
                    models.TextField(
                        blank=True,
                        help_text="Default value. Comma or new line separated values supported for checkboxes.",
                        verbose_name="default value",
                    ),
                ),
                (
                    "help_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="help text"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="form_fields",
                        to="home.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Experience",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "job_title",
                    models.CharField(blank=True, default="Job Title", max_length=256),
                ),
                ("company", models.CharField(blank=True, default=None, max_length=256)),
                ("company_url", models.URLField(blank=True, null=True)),
                (
                    "location",
                    models.CharField(blank=True, default=None, max_length=256),
                ),
                ("start", models.DateField(default=django.utils.timezone.now)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "achievement_1",
                    models.CharField(blank=True, default=None, max_length=2000),
                ),
                (
                    "achievement_2",
                    models.CharField(blank=True, default=None, max_length=2000),
                ),
                (
                    "achievement_3",
                    models.CharField(blank=True, default=None, max_length=2000),
                ),
                (
                    "achievement_4",
                    models.CharField(blank=True, default=None, max_length=2000),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="experience",
                        to="home.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("job_title", "company")},
            },
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("name", models.CharField(max_length=256)),
                ("icon", models.CharField(max_length=256)),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="skills",
                        to="home.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("name", "icon")},
            },
        ),
        migrations.CreateModel(
            name="Publication",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("name", wagtail.fields.RichTextField(blank=True, null=True)),
                ("abstract", wagtail.fields.RichTextField(blank=True, null=True)),
                ("authors", wagtail.fields.RichTextField(blank=True, null=True)),
                ("journal", wagtail.fields.RichTextField(blank=True, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("doi", models.CharField(max_length=256)),
                ("impact_factor", models.FloatField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                (
                    "logo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="publication",
                        to="home.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("name", "journal")},
            },
        ),
        migrations.CreateModel(
            name="ProjectTechnologyPairs",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "project",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="used_technologies",
                        to="home.project",
                    ),
                ),
                (
                    "used_technology",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="home.usedtechnology",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("project", "used_technology")},
            },
        ),
        migrations.CreateModel(
            name="ExperienceTechnologyPairs",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "experience",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="used_technologies_exp",
                        to="home.experience",
                    ),
                ),
                (
                    "used_technology",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="home.usedtechnology",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("experience", "used_technology")},
            },
        ),
        migrations.CreateModel(
            name="Education",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("program_name", models.CharField(max_length=128)),
                ("faculty", models.CharField(blank=True, max_length=128, null=True)),
                ("degree", models.CharField(max_length=128)),
                ("educational_institution", models.CharField(max_length=128)),
                ("educational_institution_url", models.URLField(blank=True, null=True)),
                (
                    "location",
                    models.CharField(blank=True, default=None, max_length=256),
                ),
                ("start", models.DateField(default=django.utils.timezone.now)),
                ("end", models.DateField(blank=True, null=True)),
                ("gpa", models.FloatField()),
                ("max_gpa", models.FloatField(blank=True, default=5.0)),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="education",
                        to="home.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
                "unique_together": {("educational_institution", "program_name")},
            },
        ),
    ]
